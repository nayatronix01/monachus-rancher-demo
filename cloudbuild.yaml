steps:
#- id: 'build image'
#  name: 'gcr.io/cloud-builders/docker'
#  args: 
#    - 'build'
#    - '-t'
#    - 'gcr.io/${PROJECT_ID}/myreact-app:$SHORT_SHA'
#    - '.'
#    - '-f'
#    - './Dockerfile'
#  timeout: 1000s
#- id: 'push to container registry'
#  name: 'gcr.io/cloud-builders/docker'
#  args: 
#    - 'push'
#    - 'gcr.io/${PROJECT_ID}/myreact-app:$SHORT_SHA'
#- id: 'deploy to gke'
#  name: 'gcr.io/cloud-builders/gcloud'
#  env:
#    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
#    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#    - 'KUBECONFIG=/.kube/config'
#  entrypoint: 'bash'
#  args:
#    - '-c'
#    - |
#          
#          gcloud container clusters get-credentials gcp-gke-cluster-prod --project work-examples --zone europe-west1-b
#         sed -i 's|gcr.io/project-id/myreact-app|gcr.io/$PROJECT_ID/myreact-app:$SHORT_SHA|' ./deployment.yaml
#          kubectl apply -f ./deployment.yaml
#timeout: 2000s

# deploys the new version of our container image in the Kubernetes Engine cluster.
#The env takes a list of environment variables to be used when running the step. The are KEY=VALUE.
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy
  args: ['apply' , '-f' , 'deployment.yaml']
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=europe-west1'   
  - 'CLOUDSDK_CONTAINER_CLUSTER=gcp-gke-cluster-prod'
# - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
# - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
